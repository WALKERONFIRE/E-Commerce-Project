// <auto-generated />
using System;
using E_CommerceProject0.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_CommerceProject0.Migrations
{
    [DbContext(typeof(E_CommerceContext))]
    partial class E_CommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_CommerceProject0.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfferPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.ProdRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductRequestId");

                    b.ToTable("ProductRequestDetails");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PriceAfterOffer")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("availablity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OfferId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.ProductRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("ProductRequests");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.UserPaymentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentReport");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorSsn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.VendorPaymentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPaymentReport");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Order", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.OrderItem", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("E_CommerceProject0.Model.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.ProdRequestDetail", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Category", null)
                        .WithMany("ProdRequestDetails")
                        .HasForeignKey("CategoryId");

                    b.HasOne("E_CommerceProject0.Model.Product", "Product")
                        .WithMany("ProdRequestDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("E_CommerceProject0.Model.ProductRequest", "ProductRequest")
                        .WithMany("ProdRequestDetails")
                        .HasForeignKey("ProductRequestId");

                    b.Navigation("Product");

                    b.Navigation("ProductRequest");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Product", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("E_CommerceProject0.Model.Offer", "Offer")
                        .WithMany("products")
                        .HasForeignKey("OfferId");

                    b.HasOne("E_CommerceProject0.Model.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId");

                    b.Navigation("Category");

                    b.Navigation("Offer");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.ProductRequest", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("E_CommerceProject0.Model.Vendor", "Vendor")
                        .WithMany("productRequests")
                        .HasForeignKey("VendorId");

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.User", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.UserPaymentReport", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Order", "Order")
                        .WithOne("report")
                        .HasForeignKey("E_CommerceProject0.Model.UserPaymentReport", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceProject0.Model.User", "User")
                        .WithMany("UserPaymentReports")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Vendor", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Country", "Country")
                        .WithMany("Vendors")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.VendorPaymentReport", b =>
                {
                    b.HasOne("E_CommerceProject0.Model.Vendor", "Vendor")
                        .WithMany("vendorPaymentReports")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Category", b =>
                {
                    b.Navigation("ProdRequestDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Country", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Offer", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("report");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProdRequestDetails");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.ProductRequest", b =>
                {
                    b.Navigation("ProdRequestDetails");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserPaymentReports");
                });

            modelBuilder.Entity("E_CommerceProject0.Model.Vendor", b =>
                {
                    b.Navigation("productRequests");

                    b.Navigation("Products");

                    b.Navigation("vendorPaymentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
